// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Relay = require("../external/relay.bs.js");
var Helper = require("../helper.bs.js");
var Graphql = require("graphql");
var DbManager = require("../dbManager.bs.js");
var UserSchema = require("./UserSchema.bs.js");
var ConfigSchema = require("./ConfigSchema.bs.js");
var GraphqlRelay = require("graphql-relay");
var NodeDefinition = require("./nodeDefinition.bs.js");

var userConnectionType = GraphqlRelay.connectionDefinitions({
      name: "User",
      nodeType: UserSchema.userType
    });

var configConnectionType = GraphqlRelay.connectionDefinitions({
      name: "Config",
      nodeType: ConfigSchema.configType
    });

var queryType = new Graphql.GraphQLObjectType({
      name: "Query",
      description: "The query root of the system.",
      interfaces: undefined,
      fields: (function (param) {
          return {
                  users: {
                    type: userConnectionType.connectionType,
                    description: "A list of users.",
                    args: Helper.jsUnwrapVariant({
                          TAG: /* RelayDefault */0,
                          _0: Relay.newConnectionArgs(undefined)
                        }),
                    resolve: (async function (param, args) {
                        var users = await DbManager.getUsers(undefined);
                        return Relay.connectionFromArray(users, args);
                      })
                  },
                  configs: {
                    type: configConnectionType.connectionType,
                    description: "A list of configs.",
                    args: Helper.jsUnwrapVariant({
                          TAG: /* WithUserId */1,
                          _0: ConfigSchema.configArgsInputValue
                        }),
                    resolve: (async function (param, args) {
                        var args$1 = Helper.jsFakeUnwrapVariant(args);
                        var userId = args$1.userId;
                        var configs = userId !== undefined ? await DbManager.getConfigsBuyUserIds(Relay.parseCustomIdTypeId(userId)) : await DbManager.getConfigs(undefined);
                        return Relay.connectionFromArray(configs, args$1);
                      })
                  },
                  node: NodeDefinition.nodeDefinitions.nodeField,
                  nodes: NodeDefinition.nodeDefinitions.nodesField
                };
        })
    });

var mutationType = new Graphql.GraphQLObjectType({
      name: "Mutation",
      description: "The mutation root of the system.",
      interfaces: undefined,
      fields: (function (param) {
          return {
                  test: {
                    type: Graphql.GraphQLString,
                    description: "A test mutation.",
                    resolve: (function (param) {
                        return "test";
                      })
                  },
                  addConfig: ConfigSchema.addConfigMutation,
                  deleteConfig: ConfigSchema.deleteConfigMutation
                };
        })
    });

var schema = new Graphql.GraphQLSchema({
      query: queryType,
      mutation: mutationType
    });

exports.userConnectionType = userConnectionType;
exports.configConnectionType = configConnectionType;
exports.queryType = queryType;
exports.mutationType = mutationType;
exports.schema = schema;
/* userConnectionType Not a pure module */
