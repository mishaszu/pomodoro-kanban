// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Relay = require("./relay.bs.js");
var Graphql = require("graphql");
var DbManager = require("../dbManager.bs.js");
var GraphqlRelay = require("graphql-relay");
var NodeDefinition = require("./nodeDefinition.bs.js");

var userType = new Graphql.GraphQLObjectType({
      name: "User",
      description: "A user in the system.",
      interfaces: (function (param) {
          return [NodeDefinition.nodeDefinitions.nodeInterface];
        }),
      fields: (function (param) {
          return {
                  id: GraphqlRelay.globalIdField("User"),
                  name: {
                    type: Graphql.GraphQLString,
                    description: "The name of the user.",
                    resolve: undefined
                  },
                  email: {
                    type: Graphql.GraphQLString,
                    description: "The email of the user.",
                    resolve: undefined
                  }
                };
        })
    });

var userConnectionType = GraphqlRelay.connectionDefinitions({
      name: "User",
      nodeType: userType
    });

var queryType = new Graphql.GraphQLObjectType({
      name: "Query",
      description: "The query root of the system.",
      interfaces: undefined,
      fields: (function (param) {
          return {
                  users: {
                    type: userConnectionType.connectionType,
                    description: "A list of users.",
                    args: Relay.newConnectionArgs(undefined),
                    resolve: (async function (param, args) {
                        var users = await DbManager.getUsers(undefined);
                        return GraphqlRelay.connectionFromArray(users, args);
                      })
                  },
                  node: NodeDefinition.nodeDefinitions.nodeField,
                  nodes: NodeDefinition.nodeDefinitions.nodesField
                };
        })
    });

var mutationType = new Graphql.GraphQLObjectType({
      name: "Mutation",
      description: "The mutation root of the system.",
      interfaces: undefined,
      fields: (function (param) {
          return {
                  test: {
                    type: Graphql.GraphQLString,
                    description: "A test mutation.",
                    resolve: (function (param) {
                        return "test";
                      })
                  }
                };
        })
    });

var schema = new Graphql.GraphQLSchema({
      query: queryType,
      mutation: mutationType
    });

exports.userType = userType;
exports.userConnectionType = userConnectionType;
exports.queryType = queryType;
exports.mutationType = mutationType;
exports.schema = schema;
/* userType Not a pure module */
