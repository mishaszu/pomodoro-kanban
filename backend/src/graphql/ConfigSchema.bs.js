// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Uuid = require("uuid");
var Relay = require("../external/relay.bs.js");
var Graphql = require("graphql");
var DbManager = require("../dbManager.bs.js");
var GraphqlRelay = require("graphql-relay");
var NodeDefinition = require("./nodeDefinition.bs.js");

var someArgs = Relay.newConnectionArgs(undefined);

var configArgsInputValue = Relay.newConnectionCustomArgs({
      userId: {
        type: Graphql.GraphQLID,
        description: "The uuid of the user."
      }
    });

var configType = new Graphql.GraphQLObjectType({
      name: "Config",
      description: "User config for pomodoro timer",
      interfaces: (function (param) {
          return [NodeDefinition.nodeDefinitions.nodeInterface];
        }),
      fields: (function (param) {
          return {
                  id: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
                    description: "The uuid of the user.",
                    resolve: (function (obj) {
                        return Relay.customIdTypeCreator(obj, "config");
                      })
                  },
                  pomodoroDuration: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
                    description: "The duration of a pomodoro in minutes.",
                    resolve: undefined
                  },
                  shortBreakDuration: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
                    description: "The duration of a short break in minutes.",
                    resolve: undefined
                  },
                  longBreakDuration: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
                    description: "The duration of a long break in minutes.",
                    resolve: undefined
                  },
                  longBreakInterval: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
                    description: "The number of pomodoros before a long break.",
                    resolve: undefined
                  },
                  autoStartBreak: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    description: "Whether to automatically start a break after a pomodoro.",
                    resolve: undefined
                  },
                  autoStartPomodoro: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    description: "Whether to automatically start a pomodoro after a break.",
                    resolve: undefined
                  },
                  showCompletedTasks: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
                    description: "Whether to show completed tasks in the task list.",
                    resolve: undefined
                  },
                  createdAt: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLFloat),
                    description: "The timestamp of when the user was created.",
                    resolve: undefined
                  },
                  updatedAt: {
                    type: new Graphql.GraphQLNonNull(Graphql.GraphQLFloat),
                    description: "The timestamp of when the user was last updated.",
                    resolve: undefined
                  }
                };
        })
    });

var addConfigMutationFields = {
  userId: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
    description: "The uuid of the user."
  },
  pomodoroDuration: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
    description: "The duration of a pomodoro in minutes."
  },
  shortBreakDuration: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
    description: "The duration of a short break in minutes."
  },
  longBreakDuration: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
    description: "The duration of a long break in minutes."
  },
  longBreakInterval: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLInt),
    description: "The number of pomodoros before a long break."
  },
  autoStartBreak: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
    description: "Whether to automatically start a break after a pomodoro."
  },
  autoStartPomodoro: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
    description: "Whether to automatically start a pomodoro after a break."
  },
  showCompletedTasks: {
    type: new Graphql.GraphQLNonNull(Graphql.GraphQLBoolean),
    description: "Whether to show completed tasks in the task list."
  }
};

var addConfigMutationOutputFields_message = {
  type: new Graphql.GraphQLNonNull(Graphql.GraphQLString),
  description: "A message describing the result of the mutation.",
  resolve: (function (obj) {
      return obj.message;
    })
};

var addConfigMutationOutputFields_error = {
  type: Graphql.GraphQLString,
  description: "An error message if the mutation failed.",
  resolve: (function (obj) {
      return obj.error;
    })
};

var addConfigMutationOutputFields = {
  message: addConfigMutationOutputFields_message,
  error: addConfigMutationOutputFields_error
};

var addConfigMutation = GraphqlRelay.mutationWithClientMutationId({
      name: "AddConfig",
      description: "Add a config for a user.",
      inputFields: addConfigMutationFields,
      mutateAndGetPayload: (async function (input) {
          var userId = Relay.parseCustomIdTypeId(input.userId);
          var result;
          if (userId !== undefined) {
            var value = await DbManager.createConfig({
                  id: Uuid.v4(),
                  pomodoroDuration: input.pomodoroDuration,
                  shortBreakDuration: input.shortBreakDuration,
                  longBreakDuration: input.longBreakDuration,
                  longBreakInterval: input.longBreakInterval,
                  autoStartBreak: input.autoStartBreak,
                  autoStartPomodoro: input.autoStartPomodoro,
                  showCompletedTasks: input.showCompletedTasks,
                  User: {
                    connect: {
                      id: userId
                    }
                  }
                });
            result = {
              TAG: /* Ok */0,
              _0: value
            };
          } else {
            result = {
              TAG: /* Error */1,
              _0: "Invalid user id."
            };
          }
          if (result.TAG === /* Ok */0) {
            return {
                    message: "Config added successfully.",
                    error: null
                  };
          } else {
            return {
                    message: "",
                    error: result._0
                  };
          }
        }),
      outputFields: addConfigMutationOutputFields
    });

var deleteConfigMutation = GraphqlRelay.mutationWithClientMutationId({
      name: "DeleteConfig",
      description: "Delete a config by its id.",
      inputFields: {
        configId: {
          type: new Graphql.GraphQLNonNull(Graphql.GraphQLID),
          description: "The uuid of the config."
        }
      },
      mutateAndGetPayload: (async function (input) {
          var configId = Relay.parseCustomIdTypeId(input.configId);
          var result;
          if (configId !== undefined) {
            var value = await DbManager.deleteConfig(configId);
            result = {
              TAG: /* Ok */0,
              _0: value
            };
          } else {
            result = {
              TAG: /* Error */1,
              _0: "Invalid user id."
            };
          }
          if (result.TAG === /* Ok */0) {
            return {
                    message: "Config deleted successfully.",
                    error: null
                  };
          } else {
            return {
                    message: "",
                    error: result._0
                  };
          }
        }),
      outputFields: addConfigMutationOutputFields
    });

exports.someArgs = someArgs;
exports.configArgsInputValue = configArgsInputValue;
exports.configType = configType;
exports.addConfigMutationFields = addConfigMutationFields;
exports.addConfigMutationOutputFields = addConfigMutationOutputFields;
exports.addConfigMutation = addConfigMutation;
exports.deleteConfigMutation = deleteConfigMutation;
/* someArgs Not a pure module */
